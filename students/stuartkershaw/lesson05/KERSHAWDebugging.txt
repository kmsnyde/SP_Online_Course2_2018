We omitted the recursion base case which allowed n to decrease and run against the condtional of 'n == 2' forever.
Included the base case to return false if 'n < 2' to patch the script. 

pdb debug logs below:

django@stuarts-macbook:~/SP_Online_Course2_2018/students/stuartkershaw/lesson05$ python -m pdb recurse.py 15
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(1)<module>()
-> import sys
(Pdb) ll
  1  ->	import sys
  2  	
  3  	
  4  	def my_fun(n):
  5  	    if n == 2:
  6  	        return True
  7  	
  8  	    return my_fun(n / 2)
  9  	
 10  	
 11  	if __name__ == '__main__':
 12  	    n = int(sys.argv[1])
 13  	    print(my_fun(n))
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(4)<module>()
-> def my_fun(n):
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(11)<module>()
-> if __name__ == '__main__':
(Pdb) s
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(12)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(13)<module>()
-> print(my_fun(n))
(Pdb) pp n
15
(Pdb) ll
  1  	import sys
  2  	
  3  	
  4  	def my_fun(n):
  5  	    if n == 2:
  6  	        return True
  7  	
  8  	    return my_fun(n / 2)
  9  	
 10  	
 11  	if __name__ == '__main__':
 12  	    n = int(sys.argv[1])
 13  ->	    print(my_fun(n))
(Pdb) s
--Call--
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(4)my_fun()
-> def my_fun(n):
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n == 2:
(Pdb) pp n
15
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> return my_fun(n / 2)
(Pdb) pp n
15
(Pdb) n
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 431, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py", line 13, in <module>
    print(my_fun(n))
  File "/Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py", line 8, in my_fun
    return my_fun(n / 2)
  File "/Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py", line 8, in my_fun
    return my_fun(n / 2)
  File "/Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py", line 8, in my_fun
    return my_fun(n / 2)
  [Previous line repeated 980 more times]
  File "/Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py", line 4, in my_fun
    def my_fun(n):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 50, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 76, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 173, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 29, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py(29)canonic()
-> if filename == "<" + filename[1:-1] + ">":
(Pdb) pp n
*** NameError: name 'n' is not defined
(Pdb) ll
 28  	    def canonic(self, filename):
 29  ->	        if filename == "<" + filename[1:-1] + ">":
 30  	            return filename
 31  	        canonic = self.fncache.get(filename)
 32  	        if not canonic:
 33  	            canonic = os.path.abspath(filename)
 34  	            canonic = os.path.normcase(canonic)
 35  	            self.fncache[filename] = canonic
 36  	        return canonic
(Pdb) quit
Post mortem debugger finished. The recurse.py will be restarted
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(1)<module>()
-> import sys
(Pdb) ll
  1  ->	import sys
  2  	
  3  	
  4  	def my_fun(n):
  5  	    if n == 2:
  6  	        return True
  7  	
  8  	    return my_fun(n / 2)
  9  	
 10  	
 11  	if __name__ == '__main__':
 12  	    n = int(sys.argv[1])
 13  	    print(my_fun(n))
(Pdb) breakpoint 5
*** SyntaxError: invalid syntax
(Pdb) b 5
Breakpoint 1 at /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py:5
(Pdb) ll
  1  ->	import sys
  2  	
  3  	
  4  	def my_fun(n):
  5 B	    if n == 2:
  6  	        return True
  7  	
  8  	    return my_fun(n / 2)
  9  	
 10  	
 11  	if __name__ == '__main__':
 12  	    n = int(sys.argv[1])
 13  	    print(my_fun(n))
(Pdb) c
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n == 2:
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> return my_fun(n / 2)
(Pdb) s
--Call--
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(4)my_fun()
-> def my_fun(n):
(Pdb) pp n
7.5
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n == 2:
(Pdb) s
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> return my_fun(n / 2)
(Pdb) pp n
7.5
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n == 2:
(Pdb) pp n
3.75
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> return my_fun(n / 2)
(Pdb) pp n
3.75
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n == 2:
(Pdb) pp n
1.875
(Pdb) quit
django@stuarts-macbook:~/SP_Online_Course2_2018/students/stuartkershaw/lesson05$ vi recurse.py 
django@stuarts-macbook:~/SP_Online_Course2_2018/students/stuartkershaw/lesson05$ cat recurse.py 
import sys


def my_fun(n):
    if n < 2:
        return False

    if n == 2:
        return True

    return my_fun(n / 2)


if __name__ == '__main__':
    n = int(sys.argv[1])
    print(my_fun(n))
django@stuarts-macbook:~/SP_Online_Course2_2018/students/stuartkershaw/lesson05$ python recurse.py 15
False
django@stuarts-macbook:~/SP_Online_Course2_2018/students/stuartkershaw/lesson05$ python -m pdb recurse.py 15
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(1)<module>()
-> import sys
(Pdb) ll
  1  ->	import sys
  2  	
  3  	
  4  	def my_fun(n):
  5  	    if n < 2:
  6  	        return False
  7  	
  8  	    if n == 2:
  9  	        return True
 10  	
 11  	    return my_fun(n / 2)
 12  	
 13  	
 14  	if __name__ == '__main__':
 15  	    n = int(sys.argv[1])
 16  	    print(my_fun(n))
(Pdb) b 5
Breakpoint 1 at /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py:5
(Pdb) c
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n < 2:
(Pdb) pp n
15
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> if n == 2:
(Pdb) pp n
15
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(11)my_fun()
-> return my_fun(n / 2)
(Pdb) pp n
15
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n < 2:
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(8)my_fun()
-> if n == 2:
(Pdb) pp n
7.5
(Pdb) c
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n < 2:
(Pdb) pp n
3.75
(Pdb) c
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(5)my_fun()
-> if n < 2:
(Pdb) pp n
1.875
(Pdb) n
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(6)my_fun()
-> return False
(Pdb) ll
  4  	def my_fun(n):
  5 B	    if n < 2:
  6  ->	        return False
  7  	
  8  	    if n == 2:
  9  	        return True
 10  	
 11  	    return my_fun(n / 2)
(Pdb) n
--Return--
> /Users/django/PythonCert/Python220/SP_Online_Course2_2018/students/stuartkershaw/lesson05/recurse.py(6)my_fun()->False
-> return False
(Pdb) quit
